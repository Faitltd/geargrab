# Cloud Build configuration for GearGrab SvelteKit application
# Builds Docker image and deploys to Cloud Run with secure environment variables

steps:
  # Step 1: Authenticate with service account
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'authenticate'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Authenticating with service account..."
        gcloud auth activate-service-account --key-file=/workspace/service-account-key.json
        gcloud config set project ${PROJECT_ID}
        echo "Authentication completed"

  # Step 2: Build Docker image with build args
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '--target=runtime'
      - '--build-arg=NODE_ENV=production'
      - '--build-arg=PUBLIC_FIREBASE_API_KEY=${_PUBLIC_FIREBASE_API_KEY}'
      - '--build-arg=PUBLIC_FIREBASE_AUTH_DOMAIN=${_PUBLIC_FIREBASE_AUTH_DOMAIN}'
      - '--build-arg=PUBLIC_FIREBASE_PROJECT_ID=${_PUBLIC_FIREBASE_PROJECT_ID}'
      - '--build-arg=PUBLIC_FIREBASE_STORAGE_BUCKET=${_PUBLIC_FIREBASE_STORAGE_BUCKET}'
      - '--build-arg=PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}'
      - '--build-arg=PUBLIC_FIREBASE_APP_ID=${_PUBLIC_FIREBASE_APP_ID}'
      - '--build-arg=PUBLIC_STRIPE_PUBLISHABLE_KEY=${_PUBLIC_STRIPE_PUBLISHABLE_KEY}'
      - '--build-arg=PUBLIC_APP_URL=${_PUBLIC_APP_URL}'
      - '--cache-from=gcr.io/${PROJECT_ID}/geargrab:latest'
      - '--tag=gcr.io/${PROJECT_ID}/geargrab:${SHORT_SHA}'
      - '--tag=gcr.io/${PROJECT_ID}/geargrab:latest'
      - '.'
    waitFor: ['authenticate']

  # Step 3: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '--all-tags'
      - 'gcr.io/${PROJECT_ID}/geargrab'
    waitFor: ['build-image']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-cloudrun'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying to Cloud Run..."
        gcloud run deploy geargrab \
          --image=gcr.io/${PROJECT_ID}/geargrab:${SHORT_SHA} \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --port=8080 \
          --memory=1Gi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --concurrency=80 \
          --timeout=300 \
          --service-account=${_SERVICE_ACCOUNT_EMAIL} \
          --set-env-vars="NODE_ENV=production,PORT=8080,HOST=0.0.0.0" \
          --set-secrets="FIREBASE_PRIVATE_KEY=firebase-private-key:latest,FIREBASE_CLIENT_EMAIL=firebase-client-email:latest,STRIPE_SECRET_KEY=stripe-secret-key:latest,STRIPE_WEBHOOK_SECRET=stripe-webhook-secret:latest,SESSION_SECRET=session-secret:latest" \
          --ingress=all \
          --cpu-throttling \
          --execution-environment=gen2 \
          --quiet
        
        echo "Deployment completed successfully"
        
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe geargrab --region=${_REGION} --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
    waitFor: ['push-image']

  # Step 5: Run health check
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running health check..."
        SERVICE_URL=$(gcloud run services describe geargrab --region=${_REGION} --format='value(status.url)')
        
        # Wait for service to be ready
        sleep 30
        
        # Perform health check
        for i in {1..5}; do
          if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
            echo "Health check passed"
            exit 0
          else
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
        echo "Health check failed after 5 attempts"
        exit 1
    waitFor: ['deploy-cloudrun']

  # Step 6: Update traffic allocation (optional)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'update-traffic'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Updating traffic allocation..."
        gcloud run services update-traffic geargrab \
          --region=${_REGION} \
          --to-latest \
          --quiet
        echo "Traffic updated to latest revision"
    waitFor: ['health-check']

# Substitution variables (can be overridden)
substitutions:
  _REGION: 'us-central1'
  _SERVICE_ACCOUNT_EMAIL: 'geargrab-cloudrun@${PROJECT_ID}.iam.gserviceaccount.com'
  _PUBLIC_FIREBASE_API_KEY: ''
  _PUBLIC_FIREBASE_AUTH_DOMAIN: '${PROJECT_ID}.firebaseapp.com'
  _PUBLIC_FIREBASE_PROJECT_ID: '${PROJECT_ID}'
  _PUBLIC_FIREBASE_STORAGE_BUCKET: '${PROJECT_ID}.appspot.com'
  _PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ''
  _PUBLIC_FIREBASE_APP_ID: ''
  _PUBLIC_STRIPE_PUBLISHABLE_KEY: ''
  _PUBLIC_APP_URL: 'https://geargrab-${PROJECT_ID}.a.run.app'

# Build options
options:
  # Use high-performance machine type for faster builds
  machineType: 'E2_HIGHCPU_8'
  
  # Enable Docker layer caching
  env:
    - 'DOCKER_BUILDKIT=1'
  
  # Increase build timeout
  timeout: '1200s'
  
  # Use substitution option
  substitution_option: 'ALLOW_LOOSE'
  
  # Enable logging
  logging: 'CLOUD_LOGGING_ONLY'

# Build timeout
timeout: '1200s'

# Images to be pushed to Container Registry
images:
  - 'gcr.io/${PROJECT_ID}/geargrab:${SHORT_SHA}'
  - 'gcr.io/${PROJECT_ID}/geargrab:latest'

# Service account for Cloud Build
serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/geargrab-cloudbuild@${PROJECT_ID}.iam.gserviceaccount.com'
