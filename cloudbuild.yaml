steps:
  # Install dependencies and run security audit
  - name: 'node:20'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîç Running security audit..."
        npm ci
        npm audit --audit-level moderate
        echo "‚úÖ Security audit passed"

  # Build application with security checks
  - name: 'node:20'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üèóÔ∏è Building application..."
        npm ci
        npm run build
        echo "‚úÖ Application built successfully"

  # Build and push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/geargrab-app', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/geargrab-app']

  # Deploy to Cloud Run with security configuration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'geargrab-app'
      - '--image'
      - 'gcr.io/$PROJECT_ID/geargrab-app'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '2'
      - '--min-instances'
      - '1'
      - '--max-instances'
      - '10'
      - '--timeout'
      - '300'
      - '--port'
      - '8080'
      - '--set-env-vars'
      - 'NODE_ENV=production,FIREBASE_PROJECT_ID=${_FIREBASE_PROJECT_ID},FIREBASE_ADMIN_CLIENT_EMAIL=${_FIREBASE_ADMIN_CLIENT_EMAIL},FIREBASE_ADMIN_PRIVATE_KEY=${_FIREBASE_ADMIN_PRIVATE_KEY},SESSION_SECRET=${_SESSION_SECRET},CORS_ORIGINS=https://geargrab.co,https://www.geargrab.co,STRIPE_SECRET_KEY=${_STRIPE_SECRET_KEY},STRIPE_WEBHOOK_SECRET=${_STRIPE_WEBHOOK_SECRET},RATE_LIMITING_ENABLED=true,LOG_LEVEL=info'
      - '--labels'
      - 'environment=production,app=geargrab,security=enhanced'

  # Configure domain mappings
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üåê Configuring domain mappings..."

        # Check if domain mappings already exist
        if ! gcloud run domain-mappings describe geargrab.co --region=us-central1 --quiet 2>/dev/null; then
          echo "Creating domain mapping for geargrab.co..."
          gcloud run domain-mappings create --service=geargrab-app --domain=geargrab.co --region=us-central1 --quiet
        else
          echo "Domain mapping for geargrab.co already exists"
        fi

        if ! gcloud run domain-mappings describe www.geargrab.co --region=us-central1 --quiet 2>/dev/null; then
          echo "Creating domain mapping for www.geargrab.co..."
          gcloud run domain-mappings create --service=geargrab-app --domain=www.geargrab.co --region=us-central1 --quiet
        else
          echo "Domain mapping for www.geargrab.co already exists"
        fi

        echo "‚úÖ Domain configuration completed"

  # Run post-deployment health check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîç Running post-deployment health check..."

        # Get service URL
        SERVICE_URL=$(gcloud run services describe geargrab-app --region=us-central1 --format='value(status.url)')
        echo "Service URL: $SERVICE_URL"

        # Wait for service to be ready
        sleep 30

        # Test health endpoint
        if curl -f "$SERVICE_URL/api/health" > /dev/null 2>&1; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ö†Ô∏è Health check failed - service may still be starting"
        fi

        echo "üéâ Deployment completed successfully!"
        echo "üìä Service Details:"
        echo "  URL: $SERVICE_URL"
        echo "  Health: $SERVICE_URL/api/health"
        echo "  Domains: https://geargrab.co, https://www.geargrab.co"

images:
  - 'gcr.io/$PROJECT_ID/geargrab-app'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

timeout: '1200s'
