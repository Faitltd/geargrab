name: Reliable Deploy to Cloud Run

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - latest-version

env:
  PROJECT_ID: geargrabco
  SERVICE_NAME: geargrab
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: üê≥ Configure Docker for GCR
        run: |
          gcloud auth configure-docker --quiet
          echo "Docker configured for GCR"

      - name: üì¶ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: |
          echo "Installing dependencies..."
          npm cache clean --force
          npm install --no-audit --no-fund
          echo "Dependencies installed successfully"

      - name: üèóÔ∏è Build application
        run: |
          echo "Building application..."
          export NODE_ENV=production
          export VITE_FIREBASE_API_KEY="${{ secrets.VITE_FIREBASE_API_KEY }}"
          export VITE_FIREBASE_AUTH_DOMAIN="${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}"
          export VITE_FIREBASE_PROJECT_ID="${{ secrets.VITE_FIREBASE_PROJECT_ID }}"
          export VITE_FIREBASE_STORAGE_BUCKET="${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}"
          export VITE_FIREBASE_MESSAGING_SENDER_ID="${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}"
          export VITE_FIREBASE_APP_ID="${{ secrets.VITE_FIREBASE_APP_ID }}"
          export VITE_STRIPE_PUBLISHABLE_KEY="${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}"
          npm run build
          echo "Build completed successfully"
          ls -la build/

      - name: üê≥ Build Docker image
        run: |
          echo "Building Docker image..."
          IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "Image tag: $IMAGE_TAG"

          # Build with no cache if force_rebuild is true
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            docker build --no-cache -t $IMAGE_TAG .
          else
            docker build -t $IMAGE_TAG .
          fi

          echo "Docker image built successfully"

      - name: üöÄ Push Docker image
        run: |
          echo "Pushing Docker image..."
          IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          docker push $IMAGE_TAG
          echo "Docker image pushed successfully"

      - name: ‚òÅÔ∏è Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run..."
          IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2 \
            --max-instances 10 \
            --timeout 300 \
            --concurrency 80 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars PORT=8080 \
            --set-env-vars HOST=0.0.0.0 \
            --set-env-vars VITE_USE_EMULATORS=false \
            --set-env-vars VITE_APP_URL=https://geargrab.co \
            --set-env-vars FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --set-env-vars FIREBASE_SERVICE_ACCOUNT_KEY="${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" \
            --set-env-vars STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --set-env-vars VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }} \
            --set-env-vars VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }} \
            --set-env-vars VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }} \
            --set-env-vars VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }} \
            --set-env-vars VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }} \
            --set-env-vars VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }} \
            --set-env-vars VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }} \
            --quiet

          echo "‚úÖ Cloud Run deployment completed!"

      - name: üîç Test deployment
        run: |
          echo "Testing deployment..."
          sleep 30

          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "Service URL: $SERVICE_URL"

          # Test the deployment
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL)
          echo "HTTP response code: $HTTP_CODE"

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Deployment test PASSED - Facebook login is now live!"
            echo "üéâ Visit: $SERVICE_URL"
          else
            echo "‚ö†Ô∏è Deployment test warning - received status code: $HTTP_CODE"
            echo "Service may still be starting up..."
          fi

      - name: üéØ Deployment Summary
        run: |
          echo "üöÄ DEPLOYMENT COMPLETE!"
          echo "üì± Facebook login should now show 'Continue with Facebook'"
          echo "üåê Live site: https://geargrab.co"
          echo "‚è∞ Deployed at: $(date)"
          echo "üìù Commit: ${{ github.sha }}"
