name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: geargrabco
  SERVICE_NAME: geargrab-app
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID || 'geargrabco' }}
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY || 'placeholder' }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN || 'geargrabco.firebaseapp.com' }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET || 'geargrabco.appspot.com' }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID || '123456789012' }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID || 'placeholder' }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:latest \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 2 \
          --min-instances 0 \
          --max-instances 10 \
          --timeout 300 \
          --set-env-vars "NODE_ENV=production,FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID || 'geargrabco' }},FIREBASE_ADMIN_CLIENT_EMAIL=${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }},FIREBASE_ADMIN_PRIVATE_KEY=${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }},SESSION_SECRET=${{ secrets.SESSION_SECRET }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }},CORS_ORIGINS=https://geargrab.co,https://www.geargrab.co" \
          --project $PROJECT_ID

    - name: Configure domain mappings
      run: |
        # Map geargrab.co
        gcloud run domain-mappings create \
          --service $SERVICE_NAME \
          --domain geargrab.co \
          --region $REGION \
          --project $PROJECT_ID || echo "Domain mapping for geargrab.co already exists or failed"
        
        # Map www.geargrab.co  
        gcloud run domain-mappings create \
          --service $SERVICE_NAME \
          --domain www.geargrab.co \
          --region $REGION \
          --project $PROJECT_ID || echo "Domain mapping for www.geargrab.co already exists or failed"

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region $REGION \
          --project $PROJECT_ID \
          --format 'value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "::notice::Service deployed successfully at $SERVICE_URL"

    - name: Health check
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region $REGION \
          --project $PROJECT_ID \
          --format 'value(status.url)')
        
        # Wait for service to be ready
        sleep 30
        
        # Check if service responds
        if curl -f "$SERVICE_URL" > /dev/null 2>&1; then
          echo "✅ Health check passed"
          echo "::notice::Health check passed - service is responding"
        else
          echo "⚠️ Health check failed - service may still be starting"
          echo "::warning::Health check failed - check service manually"
        fi
