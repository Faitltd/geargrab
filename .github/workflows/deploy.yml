# GitHub Actions workflow for GearGrab deployment
# Automatically builds and deploys to Cloud Run on push to main branch

name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: geargrab

jobs:
  # Test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run check
    
    - name: Run tests
      run: npm run test
      env:
        NODE_ENV: test

  # Build and deploy job
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    # Set environment based on branch or input
    environment: ${{ 
      github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
      github.ref == 'refs/heads/main' && 'production' ||
      github.ref == 'refs/heads/develop' && 'staging' ||
      'staging'
    }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "SERVICE_NAME=geargrab" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "SERVICE_NAME=geargrab-staging" >> $GITHUB_ENV
        fi
    
    - name: Build and deploy with Cloud Build
      run: |
        # Prepare substitutions based on environment
        if [[ "$ENVIRONMENT" == "production" ]]; then
          SUBSTITUTIONS="_REGION=$REGION"
          SUBSTITUTIONS="$SUBSTITUTIONS,_SERVICE_ACCOUNT_EMAIL=geargrab-cloudrun@$PROJECT_ID.iam.gserviceaccount.com"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_PROJECT_ID=$PROJECT_ID"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_AUTH_DOMAIN=$PROJECT_ID.firebaseapp.com"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_STORAGE_BUCKET=$PROJECT_ID.appspot.com"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_APP_URL=https://$SERVICE_NAME-$PROJECT_ID.a.run.app"
        else
          SUBSTITUTIONS="_REGION=$REGION"
          SUBSTITUTIONS="$SUBSTITUTIONS,_SERVICE_ACCOUNT_EMAIL=geargrab-cloudrun@$PROJECT_ID.iam.gserviceaccount.com"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY_STAGING }}"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_PROJECT_ID=$PROJECT_ID"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_AUTH_DOMAIN=$PROJECT_ID.firebaseapp.com"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_STORAGE_BUCKET=$PROJECT_ID.appspot.com"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_STAGING }}"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID_STAGING }}"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_STAGING }}"
          SUBSTITUTIONS="$SUBSTITUTIONS,_PUBLIC_APP_URL=https://$SERVICE_NAME-$PROJECT_ID.a.run.app"
        fi
        
        # Submit build
        gcloud builds submit \
          --config cloudbuild.yaml \
          --substitutions="$SUBSTITUTIONS" \
          --project="$PROJECT_ID"
    
    - name: Verify deployment
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get service URL
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region=$REGION \
          --project=$PROJECT_ID \
          --format='value(status.url)')
        
        echo "Service deployed at: $SERVICE_URL"
        
        # Health check
        for i in {1..5}; do
          if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
            echo "‚úÖ Health check passed"
            echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
            exit 0
          else
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
        echo "‚ùå Health check failed"
        exit 1
    
    - name: Update deployment status
      if: always()
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "‚úÖ Deployment successful to $ENVIRONMENT environment"
          echo "üåê Service URL: $SERVICE_URL"
        else
          echo "‚ùå Deployment failed"
        fi
    
    - name: Notify on failure
      if: failure() && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '‚ùå Deployment to production failed. Please check the logs and fix the issues.'
          })

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
