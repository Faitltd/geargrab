rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Users can read and write their own private data
    match /users/{userId}/private/{document} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Listings - authenticated users can read all, but only owners can write
    match /listings/{listingId} {
      allow read: if true; // Anyone can browse listings
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;
    }

    // Bookings - only involved parties can access
    match /bookings/{bookingId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.renterUid ||
         request.auth.uid == resource.data.ownerUid);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.renterUid;
    }

    // Messages - only participants can access
    match /messages/{messageId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid in resource.data.participants);
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
    }

    // Reviews - authenticated users can read all, only reviewers can write their own
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.reviewerUid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.reviewerUid;
    }

    // For development - temporary open access (remove in production)
    match /{document=**} {
      allow read, write: if true;
    }
  }
}
