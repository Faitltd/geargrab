name: Deploy GearGrab to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: geargrabco
  SERVICE_NAME: geargrab-app
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 2 \
          --min-instances 0 \
          --max-instances 10 \
          --timeout 300 \
          --set-env-vars NODE_ENV=production \
          --set-env-vars DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --set-env-vars VITE_FIREBASE_API_KEY="${{ secrets.VITE_FIREBASE_API_KEY }}" \
          --set-env-vars VITE_FIREBASE_AUTH_DOMAIN="${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" \
          --set-env-vars VITE_FIREBASE_PROJECT_ID="${{ secrets.VITE_FIREBASE_PROJECT_ID }}" \
          --set-env-vars VITE_FIREBASE_STORAGE_BUCKET="${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" \
          --set-env-vars VITE_FIREBASE_MESSAGING_SENDER_ID="${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" \
          --set-env-vars VITE_FIREBASE_APP_ID="${{ secrets.VITE_FIREBASE_APP_ID }}" \
          --set-env-vars VITE_FIREBASE_MEASUREMENT_ID="${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}" \
          --set-env-vars FIREBASE_PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID }}" \
          --set-env-vars FIREBASE_ADMIN_CLIENT_EMAIL="${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}" \
          --set-env-vars FIREBASE_ADMIN_PRIVATE_KEY="${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}"

    - name: Configure Domain Mapping
      run: |
        # Map geargrab.co
        if ! gcloud run domain-mappings describe --domain=geargrab.co --region=$REGION 2>/dev/null; then
          echo "Creating domain mapping for geargrab.co"
          gcloud run domain-mappings create --service=$SERVICE_NAME --domain=geargrab.co --region=$REGION
        fi
        
        # Map www.geargrab.co
        if ! gcloud run domain-mappings describe --domain=www.geargrab.co --region=$REGION 2>/dev/null; then
          echo "Creating domain mapping for www.geargrab.co"
          gcloud run domain-mappings create --service=$SERVICE_NAME --domain=www.geargrab.co --region=$REGION
        fi

    - name: Get Service URL and DNS Info
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        echo "🎉 Service deployed at: $SERVICE_URL"
        
        echo "🌐 Configure these DNS records:"
        echo "A Record for geargrab.co:"
        gcloud run domain-mappings describe --domain=geargrab.co --region=$REGION --format="value(status.resourceRecords[0].rrdata)" 2>/dev/null || echo "Check Cloud Console"
        
        echo "CNAME Record for www.geargrab.co:"
        gcloud run domain-mappings describe --domain=www.geargrab.co --region=$REGION --format="value(status.resourceRecords[0].rrdata)" 2>/dev/null || echo "Check Cloud Console"
        
        echo "::notice title=Deployment Success::Service deployed at $SERVICE_URL"
