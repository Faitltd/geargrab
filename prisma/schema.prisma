// Prisma Schema for Article and Comment Models
// This schema demonstrates best practices for content management with proper relationships and security

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Can be changed to "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  avatar    String?
  bio       String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles Article[]
  comments Comment[]
  likes    Like[]
  reports  Report[]

  @@map("users")
}

// Article model with comprehensive fields
model Article {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String        @db.Text
  excerpt     String?       @db.VarChar(500)
  coverImage  String?
  status      ArticleStatus @default(DRAFT)
  isPublished Boolean       @default(false)
  publishedAt DateTime?
  viewCount   Int           @default(0)
  likeCount   Int           @default(0)
  commentCount Int          @default(0)
  
  // SEO and metadata
  metaTitle       String?
  metaDescription String?
  tags            String[] // Array of tags
  
  // Author relationship
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  comments Comment[]
  likes    Like[]
  reports  Report[]

  // Indexes for performance
  @@index([authorId])
  @@index([status])
  @@index([isPublished])
  @@index([publishedAt])
  @@index([slug])
  @@map("articles")
}

// Comment model with nested comment support
model Comment {
  id        String        @id @default(cuid())
  content   String        @db.Text
  status    CommentStatus @default(PENDING)
  isEdited  Boolean       @default(false)
  editedAt  DateTime?
  likeCount Int           @default(0)
  
  // Article relationship
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  // Author relationship
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Nested comments (self-referential relationship)
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  likes   Like[]
  reports Report[]

  // Indexes for performance
  @@index([articleId])
  @@index([authorId])
  @@index([parentId])
  @@index([status])
  @@index([createdAt])
  @@map("comments")
}

// Like system for articles and comments
model Like {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Polymorphic relationship - can like either article or comment
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  // Ensure user can only like once per item
  @@unique([userId, articleId])
  @@unique([userId, commentId])
  @@index([userId])
  @@index([articleId])
  @@index([commentId])
  @@map("likes")
}

// Report system for content moderation
model Report {
  id          String     @id @default(cuid())
  reason      ReportType
  description String?    @db.Text
  status      ReportStatus @default(PENDING)
  
  // Reporter
  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  
  // Reported content (polymorphic)
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reporterId])
  @@index([articleId])
  @@index([commentId])
  @@index([status])
  @@map("reports")
}

// Enums for type safety
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  DELETED
}

enum ReportType {
  SPAM
  HARASSMENT
  INAPPROPRIATE_CONTENT
  COPYRIGHT_VIOLATION
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}
