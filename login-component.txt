```svelte
<script lang="ts">
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  import { login, signInWithGoogle, resetPassword } from '$firebase/auth';
  import { TextInput, Button } from '$components/forms';
  import toast from 'svelte-french-toast';
  
  // Form state
  let email = '';
  let password = '';
  let loading = false;
  let error = '';
  let showResetPassword = false;
  
  // Handle form submission
  async function handleLogin() {
    loading = true;
    error = '';
    
    try {
      await login(email, password);
      
      // Get the redirect path from query params or default to home
      const redirectTo = $page.url.searchParams.get('redirect') || '/';
      goto(redirectTo);
      
      toast.success('Successfully logged in!');
    } catch (err: any) {
      console.error('Login error:', err);
      error = getAuthErrorMessage(err.code);
    } finally {
      loading = false;
    }
  }
  
  // Handle Google sign-in
  async function handleGoogleSignIn() {
    loading = true;
    error = '';
    
    try {
      await signInWithGoogle();
      
      // Get the redirect path from query params or default to home
      const redirectTo = $page.url.searchParams.get('redirect') || '/';
      goto(redirectTo);
      
      toast.success('Successfully logged in with Google!');
    } catch (err: any) {
      console.error('Google sign-in error:', err);
      error = getAuthErrorMessage(err.code);
    } finally {
      loading = false;
    }
  }
  
  // Handle password reset
  async function handleResetPassword() {
    if (!email) {
      error = 'Please enter your email address';
      return;
    }
    
    loading = true;
    
    try {
      await resetPassword(email);
      toast.success('Password reset email sent. Check your inbox.');
      showResetPassword = false;
    } catch (err: any) {
      console.error('Password reset error:', err);
      error = getAuthErrorMessage(err.code);
    } finally {
      loading = false;
    }
  }
  
  // Helper function to get user-friendly error messages
  function getAuthErrorMessage(errorCode: string): string {
    switch (errorCode) {
      case 'auth/user-not-found':
      case 'auth/wrong-password':
        return 'Invalid email or password';
      case 'auth/too-many-requests':
        return 'Too many failed login attempts. Please try again later';
      case 'auth/email-already-in-use':
        return 'Email address is already in use';
      case 'auth/weak-password':
        return 'Password is too weak';
      case 'auth/invalid-email':
        return 'Invalid email address';
      case 'auth/network-request-failed':
        return 'Network error. Please check your connection';
      default:
        return 'An error occurred. Please try again';
    }
  }
</script>

<div class="auth-container">
  <div class="auth-card">
    <h1>Log in to GearGrab</h1>
    
    {#if error}
      <div class="error-message">{error}</div>
    {/if}
    
    <form on:submit|preventDefault={handleLogin}>
      <TextInput
        label="Email Address"
        type="email"
        bind:value={email}
        disabled={loading}
        required
      />
      
      <TextInput
        label="Password"
        type="password"
        bind:value={password}
        disabled={loading}
        required
      />
      
      <div class="form-actions">
        <Button
          type="submit"
          variant="primary"
          disabled={loading}
          loading={loading}
          fullWidth
        >
          Log In
        </Button>
        
        <div class="forgot-password">
          <button
            type="button"
            on:click={() => (showResetPassword = true)}
            class="text-button"
          >
            Forgot your password?
          </button>
        </div>
      </div>
    </form>
    
    <div class="divider">
      <span>or</span>
    </div>
    
    <Button
      on:click={handleGoogleSignIn}
      variant="outline"
      disabled={loading}
      fullWidth
    >
      <img src="/images/google-icon.svg" alt="Google" />
      <span>Continue with Google</span>
    </Button>
    
    <div class="signup-link">
      Don't have an account?
      <a href="/auth/register">Sign up</a>
    </div>
  </div>
</div>

{#if showResetPassword}
  <div class="modal-backdrop" on:click={() => (showResetPassword = false)}>
    <div class="modal-content" on:click|stopPropagation>
      <h2>Reset Password</h2>
      
      <p>
        Enter your email address and we'll send you a link to reset your password.
      </p>
      
      <TextInput
        label="Email Address"
        type="email"
        bind:value={email}
        disabled={loading}
        required
      />
      
      <div class="modal-actions">
        <Button
          on:click={() => (showResetPassword = false)}
          variant="outline"
          disabled={loading}
        >
          Cancel
        </Button>
        
        <Button
          on:click={handleResetPassword}
          variant="primary"
          disabled={loading || !email}
          loading={loading}
        >
          Send Reset Link
        </Button>
      </div>
    </div>
  </div>
{/if}

<style>
  .auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 80vh;
    padding: 2rem 1rem;
  }
  
  .auth-card {
    width: 100%;
    max-width: 400px;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    background-color: white;
  }
  
  h1 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .error-message {
    background-color: #fde7e9;
    color: #e53e3e;
    padding: 0.75rem;
    border-radius: 4px;
    margin-bottom: 1rem;
  }
  
  .form-actions {
    margin-top: 1.5rem;
  }
  
  .forgot-password {
    margin-top: 0.75rem;
    text-align: center;
  }
  
  .text-button {
    background: none;
    border: none;
    color: var(--color-primary);
    cursor: pointer;
    font-size: 0.875rem;
  }
  
  .divider {
    display: flex;
    align-items: center;
    margin: 1.5rem 0;
  }
  
  .divider::before,
  .divider::after {
    content: '';
    flex: 1;
    border-bottom: 1px solid #e2e8f0;
  }
  
  .divider span {
    margin: 0 0.5rem;
    color: #718096;
    font-size: 0.875rem;
  }
  
  .signup-link {
    margin-top: 1.5rem;
    text-align: center;
    font-size: 0.875rem;
  }
  
  .signup-link a {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 500;
  }
  
  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 50;
  }
  
  .modal-content {
    background-color: white;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 400px;
  }
  
  .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.75rem;
    margin-top: 1.5rem;
  }
</style>
```