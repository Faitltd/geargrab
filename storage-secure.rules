rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Utility functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType in ['application/pdf', 'image/jpeg', 'image/png'] &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function hasValidFileName() {
      return resource.name.matches('[a-zA-Z0-9._-]+') && 
             resource.name.size() <= 100;
    }
    
    // User profile images - authenticated read, owner write with validation
    match /users/{userId}/profile/{fileName} {
      // Require authentication to view profile images
      allow read: if isAuthenticated();
      
      allow write: if isOwner(userId) && 
        isValidImageFile() &&
        hasValidFileName() &&
        fileName.matches('[a-zA-Z0-9._-]+\\.(jpg|jpeg|png|webp)');
      
      allow delete: if isOwner(userId);
    }
    
    // Listing images - authenticated read, owner write with validation
    match /listings/{listingId}/{fileName} {
      // Require authentication to view listing images
      allow read: if isAuthenticated();
      
      allow write: if isAuthenticated() && 
        isValidImageFile() &&
        hasValidFileName() &&
        fileName.matches('[a-zA-Z0-9._-]+\\.(jpg|jpeg|png|webp)') &&
        // Use custom claims or server-side verification instead of firestore.get()
        request.auth.token.listing_owner == true;
      
      allow delete: if isAuthenticated() && 
        request.auth.token.listing_owner == true;
    }
    
    // Verification documents - strict access control
    match /verification/{userId}/{fileName} {
      allow read: if isOwner(userId) || 
        (isAuthenticated() && request.auth.token.admin == true);
      
      allow write: if isOwner(userId) && 
        isValidDocumentFile() &&
        hasValidFileName() &&
        fileName.matches('[a-zA-Z0-9._-]+\\.(pdf|jpg|jpeg|png)');
      
      allow delete: if isOwner(userId) || 
        (isAuthenticated() && request.auth.token.admin == true);
    }
    
    // Booking evidence - involved parties with validation
    match /bookings/{bookingId}/{fileName} {
      allow read: if isAuthenticated() && 
        (request.auth.token.booking_participant == true ||
         request.auth.token.admin == true);

      allow write: if isAuthenticated() && 
        request.auth.token.booking_participant == true &&
        isValidImageFile() &&
        hasValidFileName() &&
        fileName.matches('[a-zA-Z0-9._-]+\\.(jpg|jpeg|png)');
      
      allow delete: if isAuthenticated() && 
        request.auth.token.admin == true;
    }
    
    // Chat/message attachments
    match /messages/{messageId}/{fileName} {
      allow read: if isAuthenticated() && 
        request.auth.token.message_participant == true;
      
      allow write: if isAuthenticated() && 
        request.auth.token.message_participant == true &&
        isValidImageFile() &&
        hasValidFileName() &&
        fileName.matches('[a-zA-Z0-9._-]+\\.(jpg|jpeg|png|pdf)');
      
      allow delete: if isAuthenticated() && 
        (request.auth.token.message_participant == true ||
         request.auth.token.admin == true);
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) && 
        isValidImageFile() &&
        hasValidFileName();
      
      // Auto-delete after 1 hour (implement via Cloud Functions)
      allow delete: if true;
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
