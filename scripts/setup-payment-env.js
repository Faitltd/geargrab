#!/usr/bin/env node

/**
 * Payment Environment Setup Script
 * 
 * This script helps configure the environment variables needed for the payment system.
 * Run with: node scripts/setup-payment-env.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

// Environment configurations
const environments = {
  development: {
    NODE_ENV: 'development',
    VITE_USE_EMULATORS: 'true',
    VITE_STRIPE_PUBLISHABLE_KEY: 'pk_test_51234567890abcdef...',
    STRIPE_SECRET_KEY: 'sk_test_51234567890abcdef...',
    STRIPE_WEBHOOK_SECRET: 'whsec_1234567890abcdef...',
    // Firebase config would be added here
  },
  production: {
    NODE_ENV: 'production',
    VITE_USE_EMULATORS: 'false',
    VITE_STRIPE_PUBLISHABLE_KEY: 'pk_live_51234567890abcdef...',
    STRIPE_SECRET_KEY: 'sk_live_51234567890abcdef...',
    STRIPE_WEBHOOK_SECRET: 'whsec_1234567890abcdef...',
    // Firebase config would be added here
  }
};

function createEnvFile(environment, config) {
  const envPath = path.join(rootDir, `.env.${environment}`);
  
  let content = `# ${environment.toUpperCase()} Environment Configuration\n`;
  content += `# Generated by setup-payment-env.js\n\n`;
  
  // Add payment system configuration
  content += `# Payment System Configuration\n`;
  for (const [key, value] of Object.entries(config)) {
    content += `${key}=${value}\n`;
  }
  
  content += `\n# Firebase Configuration\n`;
  content += `# Add your Firebase config here\n`;
  content += `FIREBASE_PROJECT_ID=your-project-id\n`;
  content += `FIREBASE_ADMIN_CLIENT_EMAIL=your-service-account@your-project.iam.gserviceaccount.com\n`;
  content += `FIREBASE_ADMIN_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\\nYOUR_PRIVATE_KEY\\n-----END PRIVATE KEY-----\\n"\n`;
  
  content += `\n# Additional Configuration\n`;
  content += `VITE_APP_URL=${environment === 'production' ? 'https://geargrab.co' : 'http://localhost:5173'}\n`;
  
  fs.writeFileSync(envPath, content);
  console.log(`‚úÖ Created ${envPath}`);
}

function checkExistingEnv() {
  const envPath = path.join(rootDir, '.env');
  if (fs.existsSync(envPath)) {
    console.log('üìã Found existing .env file');
    const content = fs.readFileSync(envPath, 'utf8');
    
    // Check for required payment variables
    const requiredVars = [
      'VITE_STRIPE_PUBLISHABLE_KEY',
      'STRIPE_SECRET_KEY',
      'FIREBASE_PROJECT_ID'
    ];
    
    const missingVars = requiredVars.filter(varName => !content.includes(varName));
    
    if (missingVars.length > 0) {
      console.log('‚ö†Ô∏è  Missing required environment variables:');
      missingVars.forEach(varName => console.log(`   - ${varName}`));
    } else {
      console.log('‚úÖ All required environment variables found');
    }
    
    return content;
  }
  
  return null;
}

function validateStripeKeys() {
  console.log('\nüîç Stripe Key Validation:');
  console.log('Make sure your Stripe keys follow this format:');
  console.log('  - Publishable Key: pk_test_... (for test) or pk_live_... (for live)');
  console.log('  - Secret Key: sk_test_... (for test) or sk_live_... (for live)');
  console.log('  - Webhook Secret: whsec_...');
  console.log('\nGet your keys from: https://dashboard.stripe.com/apikeys');
}

function createDeploymentChecklist() {
  const checklistPath = path.join(rootDir, 'DEPLOYMENT_CHECKLIST.md');
  
  const content = `# Payment System Deployment Checklist

## Pre-Deployment

### Environment Variables
- [ ] \`VITE_STRIPE_PUBLISHABLE_KEY\` - Stripe publishable key
- [ ] \`STRIPE_SECRET_KEY\` - Stripe secret key  
- [ ] \`STRIPE_WEBHOOK_SECRET\` - Stripe webhook secret
- [ ] \`FIREBASE_PROJECT_ID\` - Firebase project ID
- [ ] \`FIREBASE_ADMIN_CLIENT_EMAIL\` - Firebase service account email
- [ ] \`FIREBASE_ADMIN_PRIVATE_KEY\` - Firebase service account private key

### Stripe Configuration
- [ ] Create Stripe account
- [ ] Get API keys (test and live)
- [ ] Set up webhook endpoint: \`/api/webhooks/stripe\`
- [ ] Configure webhook events:
  - \`payment_intent.succeeded\`
  - \`payment_intent.payment_failed\`
  - \`payment_intent.canceled\`
- [ ] Test webhook delivery

### Firebase Configuration
- [ ] Create Firebase project
- [ ] Enable Firestore
- [ ] Create service account
- [ ] Download service account key
- [ ] Set up authentication

## Testing

### Local Testing
- [ ] Run \`npm run dev\`
- [ ] Visit \`/test-payment\`
- [ ] Test with Stripe test cards
- [ ] Verify webhook handling
- [ ] Check Firestore updates

### Production Testing
- [ ] Deploy to staging environment
- [ ] Test with real Stripe test keys
- [ ] Verify webhook endpoint is accessible
- [ ] Test complete booking flow
- [ ] Verify email notifications

## Deployment

### Security
- [ ] Use HTTPS in production
- [ ] Secure environment variables
- [ ] Enable CORS properly
- [ ] Set up rate limiting

### Monitoring
- [ ] Set up error tracking
- [ ] Monitor payment logs
- [ ] Set up alerts for failed payments
- [ ] Monitor webhook delivery

## Post-Deployment

- [ ] Test live payment flow
- [ ] Verify webhook handling
- [ ] Check error reporting
- [ ] Monitor for issues

## Stripe Test Cards

For testing, use these Stripe test cards:
- Success: 4242 4242 4242 4242
- Decline: 4000 0000 0000 0002
- 3D Secure: 4000 0025 0000 3155

## Support

If you encounter issues:
1. Check the browser console for errors
2. Verify environment variables are set
3. Check Stripe dashboard for payment status
4. Review webhook delivery logs
5. Check Firestore for booking updates
`;

  fs.writeFileSync(checklistPath, content);
  console.log(`‚úÖ Created ${checklistPath}`);
}

function main() {
  console.log('üöÄ GearGrab Payment System Environment Setup\n');
  
  // Check existing environment
  const existingEnv = checkExistingEnv();
  
  // Create environment files
  console.log('\nüìù Creating environment configuration files...');
  createEnvFile('development', environments.development);
  createEnvFile('production', environments.production);
  
  // Create deployment checklist
  console.log('\nüìã Creating deployment checklist...');
  createDeploymentChecklist();
  
  // Validate Stripe configuration
  validateStripeKeys();
  
  console.log('\n‚úÖ Setup complete!');
  console.log('\nNext steps:');
  console.log('1. Update .env files with your actual API keys');
  console.log('2. Configure Firebase credentials');
  console.log('3. Set up Stripe webhooks');
  console.log('4. Test the payment flow at /test-payment');
  console.log('5. Follow the deployment checklist');
  
  console.log('\nüìö Documentation:');
  console.log('- Payment System: PAYMENT_SYSTEM.md');
  console.log('- Deployment: DEPLOYMENT_CHECKLIST.md');
  console.log('- Production Readiness: PRODUCTION_READINESS.md');
}

main();
