# Docker Compose configuration for local development and testing
# This file is used for local development and CI/CD testing

version: '3.8'

services:
  # Main application service
  geargrab:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        NODE_ENV: development
        PUBLIC_FIREBASE_API_KEY: ${PUBLIC_FIREBASE_API_KEY:-demo-key}
        PUBLIC_FIREBASE_AUTH_DOMAIN: ${PUBLIC_FIREBASE_AUTH_DOMAIN:-demo.firebaseapp.com}
        PUBLIC_FIREBASE_PROJECT_ID: ${PUBLIC_FIREBASE_PROJECT_ID:-demo-project}
        PUBLIC_FIREBASE_STORAGE_BUCKET: ${PUBLIC_FIREBASE_STORAGE_BUCKET:-demo.appspot.com}
        PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${PUBLIC_FIREBASE_MESSAGING_SENDER_ID:-123456789}
        PUBLIC_FIREBASE_APP_ID: ${PUBLIC_FIREBASE_APP_ID:-1:123456789:web:abcdef}
        PUBLIC_STRIPE_PUBLISHABLE_KEY: ${PUBLIC_STRIPE_PUBLISHABLE_KEY:-pk_test_demo}
        PUBLIC_APP_URL: ${PUBLIC_APP_URL:-http://localhost:3000}
    ports:
      - "3000:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - HOST=0.0.0.0
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SESSION_SECRET=${SESSION_SECRET:-dev-session-secret}
    volumes:
      # Mount source code for development
      - .:/app
      - /app/node_modules
      - /app/build
    networks:
      - geargrab-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - geargrab-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
    depends_on:
      - geargrab
    networks:
      - geargrab-network
    restart: unless-stopped
    profiles:
      - production

# Networks
networks:
  geargrab-network:
    driver: bridge

# Volumes
volumes:
  redis-data:
    driver: local
